<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[iOS中制作Framework静态库]]></title>
    <url>%2F2017%2F08%2F07%2FiOS%E4%B8%AD%E5%88%B6%E4%BD%9CFramework%E9%9D%99%E6%80%81%E5%BA%93%2F</url>
    <content type="text"><![CDATA[前言iOS开发中我们经常需要用到各种库，比如开源库AFNetworking,静态库BaiduMapAPI_Base.framework（百度地图SDK）,还有系统动态库UIKit.framework等等，今天我们来学习一下相关知识并自己制作一个framework静态库。 基础知识库什么是库？ 库是程序代码的集合，是共享程序代码的一种方式。根据源代码的公开情况，库可以分为开源库和闭源库两种类型。 开源库：公开源代码，能看到具体实现，比如 SDWebImage 、 AFNetworking。 闭源库：不公开源代码，是经过编译后的二进制文件，看不到具体实现，主要分为静态库和动态库。 静态库和动态库1、静态库和静态库的存在形式 静态库：.a和.framework 动态库：.dylib(现在为.tbd)和.framework 2、静态库和动态库使用时的区别 静态库：链接时，静态库会被完整地复制到可执行文件中， 被多次使用就有多份冗余拷贝； 动态库：链接时不复制，程序运行时由系统动态加载到内存，供程序调用，系统只加载一次，多个程序共用，节省内存。 3、.a与.framework的区别 .a是纯二进制文件，.a文件不能单独使用，至少要有.h文件配合； .framework除了二进制文件外，还包含一些资源文件（头文件，plist等），由于自身包含了头文件，所以.framework可以单独使用。 制作framework静态库创建静态库工程新建一个项目，选择Cocoa Touch Framework将静态库命名为SONGTestLib（名字随便起），并填写其他必要信息新建完成之后，项目中会自动生成一个头文件SONGTestLib.h(工程名.h),创建其他相关代码文件并编写代码选择工程文件&gt;target&gt;Build Settings&gt;Linking&gt;Mach-O Type，设置为Static Library，因为系统默认创建的是动态库，需要设置此项才能生成静态库。选择工程文件&gt;target&gt;Build Phases&gt;Headers,将需要公开的头文件从Project中拖入Public。将需要公开的.h文件都用#import&lt;SONGTestLib/PublicHeader.h&gt;形式引入,记住一定要将所有的需要公开的.h文件都写在给定的.h文件中,不然编译后生成的.framework在引用的时候会有警告。 添加资源文件（可选）有时候我们的静态库中也需要图片素材等外部资源，此时我们可以将这些资源文件一起打包到framework中。 创建.bundle：外部资源不能直接打包到framework静态库中，必须将资源放到.bundle中。创建.bundle很简单，直接新建一个文件夹，将文件夹添加后缀.bundle即可。 bundle是静态的，也就是说，我们包含到包中的资源文件作为一个资源包是不参加项目编译的。也就意味着，bundle包中不能包含可执行的文件。它仅仅是作为资源，被解析成为特定的2进制数据。 将.bundle添加到静态库工程中：直接将.bundle拖入到工程中即可 生成通用的静态库此时对工程进行编译已经可以生成静态库，但按照工程默认的设置，静态库并不是支持所有的架构。因为我们的静态库是给别人用的，所以一般会支持所有的架构，模拟器和真机的各种机型都要支持，所以还需要一定的工作来生成通用的静态库。 Debug和Release版本 一般来说, 我们应该发布的是release版本。 debug:调试版本, 系统本身也会有一些调试代码. 此版本体积会稍大, 运行会稍慢。 release: 发布版本, 系统会去除调试代码, 体积变小, 运行速度变快. 对用户来说没有明显的感觉。 导出Products静态库的配置在静态库工程中，如果配置中的Build Active Architecture Only设置为YES的话，导出的静态库只包含当前的架构。在默认配置中Targets&gt;Build Settings&gt;Build Active Architecture Only,Debug为YES,release为NO，我们要发布的也是release版本，所以要确保这一步没有修改。 修改Scheme:将Build Configuration为Release 分别导出模拟器和真机版本的静态库先选择Generic iOS Device，按下Command+B：Build一下 然后随意选择一个模拟器再次Build一下 找到Build后的framework我们看到总共有两个文件夹，Release-iphoneos文件夹中是真机编译生成的文件，Release-iphonesimulator文件夹中是模拟器编译生成的文件。 合并静态库的模拟器与真机架构 合并之后的动态/静态库要与原来的名称一致，不然用的时候编译会报错 合并的主要是是framework下的同名文件 我们将合并后的文件放到Products文件夹下,命令行为lipo -create /Users/songbo/Library/Developer/Xcode/DerivedData/SONGTestLib-dalamcasyjusbjcoiswoasefbbuq/Build/Products/Release-iphonesimulator/SONGTestLib.framework/SONGTestLib /Users/songbo/Library/Developer/Xcode/DerivedData/SONGTestLib-dalamcasyjusbjcoiswoasefbbuq/Build/Products/Release-iphoneos/SONGTestLib.framework/SONGTestLib -output /Users/songbo/Library/Developer/Xcode/DerivedData/SONGTestLib-dalamcasyjusbjcoiswoasefbbuq/Build/Products/SONGTestLib 这里解释一下这看似很复杂的命令：lipo -create +被合成的两个原来文件的路径 + -output + 合成后文件的输出路径 ，所以上面命令执行之后会在Products文件夹下生成合成之后的文件将合成之后的文件SONGTestLib替换掉之前Release-iphoneos中framework中的SONGTestLib,此时Release-iphoneos中framework即是我们合成之后可以使用的framework。 验证合并后的静态库架构验证静态库架构的代码为lipo -info + 静态库文件路径 例如验证我们上面制作的静态库架构 lipo -info /Users/songbo/Library/Developer/Xcode/DerivedData/SONGTestLib-dalamcasyjusbjcoiswoasefbbuq/Build/Products/Release-iphoneos/SONGTestLib.framework/SONGTestLib验证显示我们制作的静态库架构包括i386 armv7 x86_64 arm64，符合我们的要求。 至此，静态库制作完成。 使用静态库添加静态库将上文制作好的静态库直接拖入到需要使用静态库的项目中，注意将Copy items if needed打勾， 使用资源文件(可选,与制作静态库时对应)如果制作静态库时，在静态库中添加了.bundle形式的资源文件，此时如果资源文件是必须用的，还必须要将资源文件添加到当前的工程项目中： 方法：选中工程名，在右键菜单中选择Add Files to “工程名”…，从SONGTestLib.framework中选择mapapi.bundle文件，并勾选“Copy items if needed”复选框，单击“Add”按钮，将资源文件添加到工程中。 注意事项如果静态库内有 category 分类，那么需要在添加 -ObjC 编译标识，否则可能会报：unrecognized selector sent to instance。 方法：选择工程文件&gt;target&gt;Build Settings&gt;Linking&gt;Other Linker Flags，设置为-ObjC 其他编译参数说明 1、－ObjC：加了这个参数后，链接器就会把静态库中所有的Objective-C类和分类都加载到最后的可执行文件中。 2、－all_load：会让链接器把所有找到的目标文件都加载到可执行文件中，但是千万不要随便使用这个参数！假如你使用了不止一个静态库文件，然后又使用了这个参数，那么你很有可能会遇到ld: duplicate symbol错误，因为不同的库文件里面可能会有相同的目标文件，所以建议在遇到-ObjC失效的情况下使用-force_load参数。 3、-force_load：所做的事情跟-all_load其实是一样的，但是-force_load需要指定要进行全部加载的库文件的路径，这样的话，你就只是完全加载了一个库文件，不影响其余库文件的按需加载。 参考资料 ios开发：Xcode8制作framework及使用 iOS 中静态链接库的使用 IOS开发中制作属于自己的静态库.a、资源库.bundle、.framework iOS中的静态库 .a 和 .framework &amp;&amp; 资源库.bundle iOS静态库 【.a 和framework】]]></content>
      <tags>
        <tag>iOS,技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[未来已来 - 打开新世界]]></title>
    <url>%2F2017%2F07%2F11%2F%E6%9C%AA%E6%9D%A5%E5%B7%B2%E6%9D%A5-%E6%89%93%E5%BC%80%E6%96%B0%E4%B8%96%E7%95%8C%2F</url>
    <content type="text"><![CDATA[Hi,大家好，我是此刻柳暗花明，本名宋波，目前在做iOS开发。我希望自己会是一个实干家，因为我有很多梦想，我想看到它们开花结果。欢迎来到我的地盘，嘿嘿！😜 赠人玫瑰，手有余香。 最近抽时间搭建了真正属于自己的博客，今后我会在此分享学习心得，记录生活感受。如果能够在写作过程中帮助到一些人，或者为他们带去一些启发，我一定会非常开心。 每个人都会憧憬更加美好的未来，而未来从哪里来？从此刻来。好好的把握现在，认真的活在当下，一切希望都会水到渠成，我们都会此刻柳暗花明。 未来已来——未来由此刻创造，未来诞生于此刻。新世界已打开，我是此刻柳暗花明，祝你好运！]]></content>
      <tags>
        <tag>感悟</tag>
      </tags>
  </entry>
</search>
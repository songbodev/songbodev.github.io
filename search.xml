<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[iOS知识专题之GCD学习笔记一]]></title>
    <url>%2F2018%2F03%2F16%2FiOS%E7%9F%A5%E8%AF%86%E4%B8%93%E9%A2%98%E4%B9%8BGCD%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[iOS10推送和通知新特性总结]]></title>
    <url>%2F2017%2F08%2F11%2FiOS10%E6%8E%A8%E9%80%81%E5%92%8C%E9%80%9A%E7%9F%A5%E6%96%B0%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[前言:此文章是对iOS10推送和通知新特性的一些总结，主要内容是一些需要注意的经验或技巧，对通知中具体的API没有进行很详细的介绍，所以阅读此文章需要先对iOS10的推送有一个基础的了解。 可以参考本文的参考链接，是两位大神对iOS10通知和推送进行的更详细的说明。 新framework针对推送和通知,iOS10引入了两个新的framework: UserNotifications.framework：用来注册和处理本地和远程通知,当通知到达用户的设备上时，Apps和app extensions 可以使用这个framework去接收和潜在的修改本地通知或远程通知。 UserNotificationsUI.framework：用来定制本地或远程通知出现在用户设备上时的外观。可以通过使用这个framework去定义一个app extension去接受通知的数据，然后提供一个与数据符合的可视化外观。当然这个app extension也能响应和这个通知结合的定制的响应动作。 新特性： 总体来说增加的新的实用的功能包括：撤回单条通知、更新已展示通知、中途修改通知内容、在通知中显示多媒体资源、自定义UI等。 iOS10以后，APNs可根据推送消息的唯一标示符查询某条消息是否被用户阅读，可更新某一推送消息，而不用发重读的多条消息。 推送字段说明： mutable-content:在推送中增加这个字段，决定了我们可以在service notification扩展中修改通知内容，也可以在content notification扩展中自定义通知界面。如果没有这个字段,我们新增的通知扩展不会生效。 category:是和后台商量好的一个值,不同的category可以显示不同的action,也就是通知下面的按钮或者输入框,可以扩展一些操作而不必进入程序。 apps-collapse-id:作为唯一标示，可以用来更新推送。 content-available:这个是在iOS7时引入的一个字段，如果开启了Background mode下的remote notification,并且推送的字段中包含此字段，只要用户不强制关掉App,App无论是在后台还是在前台，都可以回调下面的方法。- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(nonnull void (^)(UIBackgroundFetchResult))completionHandler 经验技巧（tips） 调用方法[[UIApplication sharedApplication] registerForRemoteNotifications];会触发调用下面两个方法之一- (void)application:(UIApplication )application didRegisterForRemoteNotificationsWithDeviceToken:(NSData )deviceToken- (void)application:(UIApplication )application didFailToRegisterForRemoteNotificationsWithError:(NSError )error也就是说，在真机环境下，哪怕用户还没有允许通知，或者设置了禁用推送，手机都是可以通过回调获取到deviceToken的。 iOS10中申请通知权限的代码如下: UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter]; center.delegate = self; // [center setNotificationCategories:nil]; [center getNotificationSettingsWithCompletionHandler:^(UNNotificationSettings * _Nonnull settings) { if (settings.authorizationStatus == UNAuthorizationStatusNotDetermined) { [center requestAuthorizationWithOptions:(UNAuthorizationOptionBadge | UNAuthorizationOptionSound | UNAuthorizationOptionAlert) completionHandler:^(BOOL granted, NSError * _Nullable error) { if (granted && !error) { NSLog(@"允许通知"); } else { NSLog(@"拒绝通知"); } }]; } }]; //在用户允许通知之后，在真机中会再次回调获取到deviceToken的代理方法。 iOS10之前，在（1）应用程序在前台时；（2）应用程序在后台，然后点击了推送进入应用程序时，两种情况下会回调方法- (void)application:(UIApplication )application didReceiveRemoteNotification:(NSDictionary )userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult result))completionHandler{ //下面简称“方法1”}如果开启了后台推送模式,还会在第三种情况下（3）应用程序在后台时，调用此方法。 从iOS10开始,新增了两个通知中心的代理方法来处理通知 - (void)userNotificationCenter:(UNUserNotificationCenter )center willPresentNotification:(UNNotification )notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions options))completionHandler { //下面简称“方法2” //此方法只有应用程序在前台时才会调用,通知展示之前调用 NSLog(@”应用程序在前台,即将展示推送”); completionHandler(UNNotificationPresentationOptionBadge | UNNotificationPresentationOptionSound | UNNotificationPresentationOptionAlert);}- (void)userNotificationCenter:(UNUserNotificationCenter )center didReceiveNotificationResponse:(UNNotificationResponse )response withCompletionHandler:(void(^)())completionHandler { //下面简称“方法3” //用户对通知进行响应之后调用,各种响应都会调用此方法，可以根据参数response来判断用户的响应方式,是点击了通知，点击了按钮还是输入了内容等 NSLog(@”用户响应”); completionHandler();}如果实现了上述两个新增方法，当推送到达之后，调用的方法情况会发生变化，如下： 应用程序在前台，会首先调用“方法1”,然后再调用方法2； 应用程序在后台，只调用“方法1”； 应用程序在后台，点击某一条推送，调用“方法3”； 应用程序在前台，点击某一条推送，调用“方法3”。 使用了iOS10的新增方法之后，要想在推送到达之前或者应用程序在后台时执行一段代码，比如修改推送内容再提示用户，需要在项目中使用应用程序扩展Notification Service Extension来实现。 如果在项目中使用了应用程序扩展Notification Service Extension，在调试的过程中，如果想要打断点调试扩展的代码，需要在Xcode中运行扩展，然后再选择项目，才可以。（后面要说的另外一个扩展Notification Content Extension也是一样的道理） iOS10的通知新特性可以让通知中包含附件,比如音频、图像或视频等内容,并且可以将其内容显示出来。使用本地通知时,可以在通知创建时,将附件加入即可。对于远程通知，则必须实现使用UNNotificationServiceExtension类通知服务扩展。 如果在项目中使用了应用程序扩展Notification Content Extension,如果想要看到效果，必须在扩展的info.plist文件中设置NSExtension-&gt;NSExtensionAttributes-&gt;UNNotificationExtensionCategory字段的内容，可以是字符串或者字符串数组，字符串代表的是categoryIdentifier，必须和通知内容中的categoryIdentifier保持一致才会有效果。 如果使用本地推送，触发器为位置信息时，一般使用CLRegion的子类CLCircularRegion类来定义位置信息。 附件类UNNotificationAttachment定义的options属性中的UNNotificationAttachmentOptionsThumbnailClippingRectKey,代表的是缩略图显示的图片范围。（这个键所对应的值是包含一个归一化的CGRect - 也就是说，一个单元的矩形，其值是在以1.0〜 0.0 ，表示要显示的原始图像的所述部分的字典。例如，原点为（0.25 ， 0.25）和大小为（0.5 ，0.5 ）定义了剪辑矩形，只显示图像的中心部分。使用CGRectCreateDictionaryRepresentation函数来创建字典的矩形。） 附件的路径并不一定需要时https的，只要打开Allow Arbitrary Loads后就可以使用http。 假如前面在Service Extension下载好了图片或者是视频，在自定义UI部分想要获取，就可以通过UNNotificationAttachment * attachment = notification.request.content.attachments.firstObject;查找附件来获取数据。但是必须注意，形成附件后，文件的实际存储被移到了pushStore的一个系统级别的缓存文件夹，此时需要调用NSURL在iOS8开始提供的两个方法来获取权限，提取数据。 startAccessingSecurityScopedResourcestopAccessingSecurityScopedResource [attachment.URL startAccessingSecurityScopedResource]; NSData * data = [NSData dataWithContentsOfFile:attachment.URL.path]; [attachment.URL stopAccessingSecurityScopedResource]; self.imageView.image = [UIImage imageWithData:data]; 参考链接 iOS10里的通知与推送 iOS10推送必看系列文章,总共四篇]]></content>
      <tags>
        <tag>iOS,推送,通知</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS中制作Framework静态库]]></title>
    <url>%2F2017%2F08%2F07%2FiOS%E4%B8%AD%E5%88%B6%E4%BD%9CFramework%E9%9D%99%E6%80%81%E5%BA%93%2F</url>
    <content type="text"><![CDATA[前言iOS开发中我们经常需要用到各种库，比如开源库AFNetworking,静态库BaiduMapAPI_Base.framework（百度地图SDK）,还有系统动态库UIKit.framework等等，今天我们来学习一下相关知识并自己制作一个framework静态库。 基础知识库什么是库？ 库是程序代码的集合，是共享程序代码的一种方式。根据源代码的公开情况，库可以分为开源库和闭源库两种类型。 开源库：公开源代码，能看到具体实现，比如 SDWebImage 、 AFNetworking。 闭源库：不公开源代码，是经过编译后的二进制文件，看不到具体实现，主要分为静态库和动态库。 静态库和动态库1、静态库和静态库的存在形式 静态库：.a和.framework 动态库：.dylib(现在为.tbd)和.framework 2、静态库和动态库使用时的区别 静态库：链接时，静态库会被完整地复制到可执行文件中， 被多次使用就有多份冗余拷贝； 动态库：链接时不复制，程序运行时由系统动态加载到内存，供程序调用，系统只加载一次，多个程序共用，节省内存。 3、.a与.framework的区别 .a是纯二进制文件，.a文件不能单独使用，至少要有.h文件配合； .framework除了二进制文件外，还包含一些资源文件（头文件，plist等），由于自身包含了头文件，所以.framework可以单独使用。 制作framework静态库创建静态库工程新建一个项目，选择Cocoa Touch Framework将静态库命名为SONGTestLib（名字随便起），并填写其他必要信息新建完成之后，在PROJECT&gt;Info&gt;Deployment Target&gt;iOS Deployment Target选择你需要支持的最低系统版本，同样的操作在TARGETS中，General&gt;Deployment Info&gt;Deployment Target，选择需要支持的最低系统版本。 项目初始生成时会自动生成一个头文件SONGTestLib.h(工程名.h),创建其他相关代码文件并编写代码选择工程文件&gt;target&gt;Build Settings&gt;Linking&gt;Mach-O Type，设置为Static Library，因为系统默认创建的是动态库，需要设置此项才能生成静态库。选择工程文件&gt;target&gt;Build Phases&gt;Headers,将需要公开的头文件从Project中拖入Public。将需要公开的.h文件都用#import&lt;SONGTestLib/PublicHeader.h&gt;形式引入,记住一定要将所有的需要公开的.h文件都写在给定的.h文件中,不然编译后生成的.framework在引用的时候会有警告。 添加资源文件（可选）有时候我们的静态库中也需要图片素材、媒体文件、xib、storyboard等外部资源，此时我们可以通过bundle将这些资源文件一起打包到framework中。 外部资源不能直接打包到framework静态库中，必须将资源放到.bundle中。 bundle是静态的，也就是说，我们包含到包中的资源文件作为一个资源包是不参加项目编译的。也就意味着，bundle包中不能包含可执行的文件。它仅仅是作为资源，被解析成为特定的2进制数据。 创建.bundle方法一:第一种创建.bundle的方法很简单，直接新建一个文件夹，将文件夹添加后缀.bundle即可。 如果需要的外部资源中只包含图片素材或媒体文件,可以优先选择这种方式,当然也可以选择下面的方法二。 方法二:通过创建工程的方式创建.bundle。 新建一个项目,选择macOS&gt;Framework &amp; Library&gt;Bundle 给项目命名,并填写其他必要信息 在TARGETS&gt;Build Settings&gt;Deployment&gt;iOS Deployment Target&gt;选择自己需要支持的最低系统版本 Build后会生成一个bundle包，但在包中的图片由以前的png格式全部变成tiff格式。为了防止这种格式转变,需要在Build Settings&gt;Architectures&gt;Base SDK&gt;选择iOS的SDK要支持的版本。这时TARGETS中Build Settings&gt;User-Defined中会出现一个新的Key：COMBINE_HIDPI_IMAGES,把它设置为NO。 将需要的资源,如图片、storyboard、xib等文件添加到工程中。storyboard和xib文件可以直接从其他项目中拖过来，也可以在当前Bundle工程中创建;至于连线,不必拘泥于必须在同一个工程中的文件,即一个工程中的xib可以与另一个工程中的文件连线,只要类名相同即可。 上面所有的步骤完成之后,command+B编译项目,即可在Products中找到生成的bundle。 使用.bundle将.bundle添加到静态库工程中：直接将.bundle拖入到工程中即可。 注:如果.bundle中包含编译之后的xib、storyboard等文件,在framework中包含xib对应的类,在使用时可能会遇到类似Unknown class NewCell in Interface Builder file.或者[ setValue:forUndefinedKey:]: this class is not key value coding-compliant for the key myImageView.的报错,这是因为xib等文件中的使用的类名没有被链接到项目中。这里列举两种解决方法: 在任意一个代码文件中调用一下报错的类,例如[MyClass class];即可。 选择工程文件&gt;target&gt;Build Settings&gt;Linking&gt;Other Linker Flags，设置为-ObjC。 获取bundle中的资源 获取bundle路径NSString *bundlePath = [NSBundle mainBundle] pathForResource:@"NibBundle" ofType:@"bundle"] 获取bundleNSBundle *myBundle = [NSBundle bundleWithPath:bundlePath] 加载bundle中的某个nib[UINib nibWithNibName:@"NibCell" bundle:myBundle] 或者 [[myBundle loadNibNamed:@"NibCell" owner:self options:nil] lastObject]; 获取bundle中的图片UIImage *image = [UIImage imageNamed:[@"YourBundleName.bundle" stringByAppendingPathComponent:@"yourImageName.png"]]; 或者 UIImage *image = [UIImage imageWithContentsOfFile:[bundlePath stringByAppendingPathComponent:@"yourImageName.png"]]; 生成通用的静态库此时对工程进行编译已经可以生成静态库，但按照工程默认的设置，静态库并不是支持所有的架构。因为我们的静态库是给别人用的，所以一般会支持所有的架构，模拟器和真机的各种机型都要支持，所以还需要一定的工作来生成通用的静态库。 Debug和Release版本 一般来说, 我们应该发布的是release版本。 debug:调试版本, 系统本身也会有一些调试代码. 此版本体积会稍大, 运行会稍慢。 release: 发布版本, 系统会去除调试代码, 体积变小, 运行速度变快. 对用户来说没有明显的感觉。 导出Products静态库的配置在静态库工程中，如果配置中的Build Active Architecture Only设置为YES的话，导出的静态库只包含当前的架构。在默认配置中Targets&gt;Build Settings&gt;Build Active Architecture Only,Debug为YES,release为NO，我们要发布的也是release版本，所以要确保这一步没有修改。 修改Scheme:将Build Configuration为Release 分别导出模拟器和真机版本的静态库先选择Generic iOS Device，按下Command+B：Build一下 然后随意选择一个模拟器再次Build一下 找到Build后的framework我们看到总共有两个文件夹，Release-iphoneos文件夹中是真机编译生成的文件，Release-iphonesimulator文件夹中是模拟器编译生成的文件。 合并静态库的模拟器与真机架构 合并之后的动态/静态库要与原来的名称一致，不然用的时候编译会报错 合并的主要是是framework下的同名文件 我们将合并后的文件放到Products文件夹下,命令行为lipo -create /Users/songbo/Library/Developer/Xcode/DerivedData/SONGTestLib-dalamcasyjusbjcoiswoasefbbuq/Build/Products/Release-iphonesimulator/SONGTestLib.framework/SONGTestLib /Users/songbo/Library/Developer/Xcode/DerivedData/SONGTestLib-dalamcasyjusbjcoiswoasefbbuq/Build/Products/Release-iphoneos/SONGTestLib.framework/SONGTestLib -output /Users/songbo/Library/Developer/Xcode/DerivedData/SONGTestLib-dalamcasyjusbjcoiswoasefbbuq/Build/Products/SONGTestLib 这里解释一下这看似很复杂的命令：lipo -create +被合成的两个原来文件的路径 + -output + 合成后文件的输出路径 ，所以上面命令执行之后会在Products文件夹下生成合成之后的文件将合成之后的文件SONGTestLib替换掉之前Release-iphoneos中framework中的SONGTestLib,此时Release-iphoneos中framework即是我们合成之后可以使用的framework。 验证合并后的静态库架构验证静态库架构的代码为lipo -info + 静态库文件路径 例如验证我们上面制作的静态库架构 lipo -info /Users/songbo/Library/Developer/Xcode/DerivedData/SONGTestLib-dalamcasyjusbjcoiswoasefbbuq/Build/Products/Release-iphoneos/SONGTestLib.framework/SONGTestLib验证显示我们制作的静态库架构包括i386 armv7 x86_64 arm64，符合我们的要求。 至此，静态库制作完成。 使用静态库添加静态库将上文制作好的静态库直接拖入到需要使用静态库的项目中，注意将Copy items if needed打勾， 使用资源文件(可选,与制作静态库时对应)如果制作静态库时，在静态库中添加了.bundle形式的资源文件，此时如果资源文件是必须用的，还必须要将资源文件添加到当前的工程项目中： 方法：选中工程名，在右键菜单中选择Add Files to “工程名”…，从SONGTestLib.framework中选择SONGImages.bundle文件，并勾选“Copy items if needed”复选框，单击“Add”按钮，将资源文件添加到工程中。 注意事项如果静态库内有 category 分类，那么需要在添加 -ObjC 编译标识，否则可能会报：unrecognized selector sent to instance。 方法：选择工程文件&gt;target&gt;Build Settings&gt;Linking&gt;Other Linker Flags，设置为-ObjC 其他编译参数说明 1、－ObjC：加了这个参数后，链接器就会把静态库中所有的Objective-C类和分类都加载到最后的可执行文件中。 2、－all_load：会让链接器把所有找到的目标文件都加载到可执行文件中，但是千万不要随便使用这个参数！假如你使用了不止一个静态库文件，然后又使用了这个参数，那么你很有可能会遇到ld: duplicate symbol错误，因为不同的库文件里面可能会有相同的目标文件，所以建议在遇到-ObjC失效的情况下使用-force_load参数。 3、-force_load：所做的事情跟-all_load其实是一样的，但是-force_load需要指定要进行全部加载的库文件的路径，这样的话，你就只是完全加载了一个库文件，不影响其余库文件的按需加载。 参考资料 ios开发：Xcode8制作framework及使用 iOS 中静态链接库的使用 IOS开发中制作属于自己的静态库.a、资源库.bundle、.framework iOS中的静态库 .a 和 .framework &amp;&amp; 资源库.bundle iOS静态库 【.a 和framework】 xcode7制作framework,结合xib,storyboard,资源文件等 “Unknown class in Interface Builder file” error at runtime]]></content>
      <tags>
        <tag>iOS,技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[未来已来 - 打开新世界]]></title>
    <url>%2F2017%2F07%2F11%2F%E6%9C%AA%E6%9D%A5%E5%B7%B2%E6%9D%A5-%E6%89%93%E5%BC%80%E6%96%B0%E4%B8%96%E7%95%8C%2F</url>
    <content type="text"><![CDATA[Hi,大家好，我是此刻柳暗花明，本名宋波，目前在做iOS开发。我希望自己会是一个实干家，因为我有很多梦想，我想看到它们开花结果。欢迎来到我的地盘，嘿嘿！😜 赠人玫瑰，手有余香。 最近抽时间搭建了真正属于自己的博客，今后我会在此分享学习心得，记录生活感受。如果能够在写作过程中帮助到一些人，或者为他们带去一些启发，我一定会非常开心。 每个人都会憧憬更加美好的未来，而未来从哪里来？从此刻来。好好的把握现在，认真的活在当下，一切希望都会水到渠成，我们都会此刻柳暗花明。 未来已来——未来由此刻创造，未来诞生于此刻。新世界已打开，我是此刻柳暗花明，祝你好运！]]></content>
      <tags>
        <tag>感悟</tag>
      </tags>
  </entry>
</search>
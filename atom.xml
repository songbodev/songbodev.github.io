<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>未来已来</title>
  <subtitle>行走天下，微观世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-19T07:25:59.441Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>此刻柳暗花明</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS知识专题之GCD学习笔记二</title>
    <link href="http://yoursite.com/2018/03/19/iOS%E7%9F%A5%E8%AF%86%E4%B8%93%E9%A2%98%E4%B9%8BGCD%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <id>http://yoursite.com/2018/03/19/iOS知识专题之GCD学习笔记二/</id>
    <published>2018-03-19T01:13:12.000Z</published>
    <updated>2018-03-19T07:25:59.441Z</updated>
    
    <content type="html"><![CDATA[<p><strong>说明:</strong>和上一篇GCD学习笔记一样,本篇文章主要内容还是来自于<a href="https://github.com/nixzhu/dev-blog/blob/master/2014-04-19-grand-central-dispatch-in-depth-part-1.md" target="_blank" rel="external">这篇博客</a>。笔者只是对内容进行了少量的修改并加入了自己的一些总结，供</p>
<h2 id="GCD常用函数使用详解"><a href="#GCD常用函数使用详解" class="headerlink" title="GCD常用函数使用详解"></a>GCD常用函数使用详解</h2><h4 id="一、用-dispatch-async-处理后台任务"><a href="#一、用-dispatch-async-处理后台任务" class="headerlink" title="一、用 dispatch_async 处理后台任务"></a>一、用 dispatch_async 处理后台任务</h4><p><code>dispatch_async</code> 添加一个 Block 到队列就立即返回了。任务会在之后由 GCD 决定执行。当你需要在后台执行一个基于网络或 CPU 紧张的任务时就使用 dispatch_async ，这样就不会阻塞当前线程。例如:</p>
<pre><code>//这里是主线程
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        //多线程执行,网络或耗时操作
        //...
        dispatch_async(dispatch_get_main_queue(), ^{
            //主线程执行,更新UI等
            //...
        });
    });
</code></pre>

<p>在 <code>dispatch_async</code> 上如何使用 <strong>队列类型</strong> 快速指导:</p>
<blockquote>
<ul>
<li><p>自定义串行队列：当你想串行执行后台任务并追踪它时就是一个好选择。这消除了资源争用，因为你知道一次只有一个任务在执行。注意若你需要来自某个方法的数据，你必须内联另一个 Block 来找回它或考虑使用 dispatch_sync。</p>
</li>
<li><p>主队列（串行）：这是在一个并发队列上完成任务后更新 UI 的共同选择。要这样做，你将在一个 Block 内部编写另一个 Block 。以及，如果你在主队列调用 dispatch_async 到主队列，你能确保这个新任务将在当前方法完成后的某个时间执行。</p>
</li>
<li><p>并发队列：这是在后台执行非 UI 工作的共同选择。</p>
</li>
</ul>
</blockquote>
<h4 id="二、使用-dispatch-after-延后工作"><a href="#二、使用-dispatch-after-延后工作" class="headerlink" title="二、使用 dispatch_after 延后工作"></a>二、使用 dispatch_after 延后工作</h4><p><code>dispatch_after</code> 工作起来就像一个延迟版的 <code>dispatch_async</code> (也是异步的执行)。你依然不能控制实际的执行时间，且一旦 <code>dispatch_after</code> 返回也就不能再取消它。示例代码如下:</p>
<pre><code>dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
    dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
        //在delayInSeconds秒之后将执行的代码
    });
</code></pre>

<p>在 <code>dispatch_after</code> 上如何使用 <strong>队列类型</strong> 快速指导:</p>
<blockquote>
<ul>
<li><p>自定义串行队列：在一个自定义串行队列上使用 dispatch_after 要小心。你最好坚持使用主队列。</p>
</li>
<li><p>主队列（串行）：是使用 dispatch_after 的好选择；Xcode 提供了一个不错的自动完成模版。</p>
</li>
<li><p>并发队列：在并发队列上使用 dispatch_after 也要小心；你会这样做就比较罕见。还是在主队列做这些操作吧。</p>
</li>
</ul>
<p><strong>总结起来，其实就是，<code>dispatch_after</code>只用在主队列<code>dispatch_get_main_queue()</code>上</strong>。</p>
</blockquote>
<h4 id="三、使用dispatch-once-创建单例-让单例线程安全"><a href="#三、使用dispatch-once-创建单例-让单例线程安全" class="headerlink" title="三、使用dispatch_once()创建单例,让单例线程安全"></a>三、使用dispatch_once()创建单例,让单例线程安全</h4><!--使用NSThread 的 sleepForTimeInterval: 类方法可以强制发生一个上下文切换。
在单例创建方法中，使用这个方法强制上下文切换,可以强制竞态条件发生，生成两个单例类的实例对象。
实际上sleepForTimeInterval这个方法只是模拟了竞态条件的发生，实际上即使没有用到sleepForTimeInterval方法，竞态条件也是有可能发生的。
所以我们采用了dispatch_once()来使得线程安全，去掉这个风险。-->
<p><strong><code>dispatch_once()</code> 以线程安全的方式执行且仅执行其代码块一次。</strong>试图访问临界区（即传递给 <code>dispatch_once</code> 的代码）的不同的线程会在临界区已有一个线程的情况下被阻塞，直到临界区完成为止。</p>
<p>综上，单例的初始化方法可以用类似下面的代码实现:</p>
<pre><code>+ (instancetype)sharedManager
{
    static CustomManager *sharedManager = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        sharedManager = [[CustomManager alloc] init];
        //其他属性的设置
    });
    return sharedManager;
}</code></pre>

<h4 id="四、利用dispatch-barrier解决读者与写者问题"><a href="#四、利用dispatch-barrier解决读者与写者问题" class="headerlink" title="四、利用dispatch_barrier解决读者与写者问题"></a>四、利用<code>dispatch_barrier</code>解决读者与写者问题</h4><p>Foundation的容器类一般都有对应的可变容器类，它们（比如 <code>NSMutableArray</code> ）一般都是线程不安全的,因为它们经常需要解决读者写者问题。</p>
<p>GCD 通过用 <code>dispatch barriers</code> 创建一个<code>读者写者锁</code> 提供了一个优雅的解决方案。</p>
<p><code>Dispatch barriers</code> 是一组函数，在并发队列上工作时扮演一个串行式的瓶颈。<strong>使用 GCD 的障碍（barrier）API 确保提交的 Block 在那个特定时间上是指定队列上唯一被执行的条目</strong>。这就意味着所有的先于调度障碍提交到队列的条目必能在这个 Block 执行前完成。</p>
<p>当这个 Block 的时机到达，调度障碍执行这个 Block 并确保在那个时间里队列不会执行任何其它 Block 。一旦完成，队列就返回到它默认的实现状态。GCD 提供了同步和异步两种障碍函数。</p>
<p>下图显示了障碍函数对多个异步并发队列的影响：</p>
<p><img src="http://osv8n47s0.bkt.clouddn.com/dispatch_barrier.png" alt="dispatch_barrier"></p>
<p>注意到正常部分的操作就如同一个正常的并发队列。但当障碍执行时，它本质上就如同一个串行队列。也就是，障碍是唯一在执行的事物。在障碍完成后，队列回到一个正常并发队列的样子。</p>
<p>在 <code>dispatch_barrier</code> 上如何使用 <strong>队列类型</strong> 快速指导:</p>
<blockquote>
<ul>
<li><p>自定义串行队列：一个很坏的选择；障碍不会有任何帮助，因为不管怎样，一个串行队列一次都只执行一个操作。</p>
</li>
<li><p>全局并发队列：要小心；这可能不是最好的主意，因为其它系统可能在使用队列而且你不能垄断它们只为你自己的目的。因为障碍执行时，可能导致系统的某些代码执行被阻塞。</p>
</li>
<li><p>自定义并发队列：这对于原子或临界区代码来说是极佳的选择。任何你在设置或实例化的需要线程安全的事物都是使用障碍的最佳候选。</p>
</li>
<li><p>总结起来就是,<strong>使用<code>dispatch_barrier</code>都用在自定义并发队列上</strong>。</p>
</li>
</ul>
</blockquote>
<p>写操作的示例代码如下:</p>
<pre><code>dispatch_barrier_async(self.concurrentPhotoQueue, ^{
        //这里是障碍block，临界区代码，这个 Block 永远不会同时和其它 Block 一起在 concurrentPhotoQueue 中执行，这里的代码执行时，这些代码将是队列中唯一执行的条目。
        dispatch_async(dispatch_get_main_queue(), ^{
            //如果需要更新UI等操作,需要使用主队列来调用
        });
    });
</code></pre>

<blockquote>
<p>注:<code>self.concurrentPhotoQueue</code>是自定义并发队列。</p>
<p>另外需要注意的是，到这里并没有结束,<strong>必须将写操作和读操作同时用在同一个障碍队列中，才可以实现读者和写者的线程安全</strong>。</p>
</blockquote>
<p>读操作通常需要用到<code>dispatch_sync</code>，因为需要等待读取操作完成之后才能返回;</p>
<p>在 <code>dispatch_sync</code> 上如何使用 <strong>队列类型</strong> 快速指导:</p>
<blockquote>
<ul>
<li><p>自定义串行队列：在这个状况下要非常小心！如果你正运行在一个队列并调用 dispatch_sync 放在同一个队列，那你就百分百地创建了一个死锁。</p>
</li>
<li><p>主队列（串行）：同上面的理由一样，必须非常小心！这个状况同样有潜在的导致死锁的情况。</p>
</li>
<li><p>并发队列：这才是做同步工作的好选择，不论是通过调度障碍，或者需要等待一个任务完成才能执行进一步处理的情况。</p>
</li>
<li><p>总结来说,<strong><code>dispatch_sync</code>只应该用在并发队列上</strong>。</p>
</li>
</ul>
</blockquote>
<p>读操作的示例代码如下:</p>
<pre><code>- (NSArray *)objects
{
    __block NSArray *array;
    dispatch_sync(self.concurrentPhotoQueue, ^{
        array = [NSArray arrayWithArray:_objectsArray];
    });
    return array;
}</code></pre>

<h4 id="五、总结-dispatch-async-和-dispatch-sync-的对比理解"><a href="#五、总结-dispatch-async-和-dispatch-sync-的对比理解" class="headerlink" title="五、总结:dispatch_async 和 dispatch_sync 的对比理解"></a>五、总结:<code>dispatch_async</code> 和 <code>dispatch_sync</code> 的对比理解</h4><p><code>dispatch_sync</code> 添加任务到一个队列并等待直到任务完成。<code>dispatch_async</code>做类似的事情，但不同之处是它不会等待任务的完成，而是立即继续“调用线程”的其它任务。</p>
<h2 id="多线程开发Tips"><a href="#多线程开发Tips" class="headerlink" title="多线程开发Tips"></a>多线程开发Tips</h2><p>多线程开发中有很多需要注意的点，本文将一些常见的Tips列下来，供参考。</p>
<ol>
<li>必须总是在主线程访问 UIKit 的类。</li>
<li>如果计划优化自己项目，可以利用 Instruments 中的 Time Profile 模版来分析项目中的CPU占用情况。</li>
<li>使用Instruments进行分析时,最好采用真机来测试，会比模拟器更加准确。</li>
</ol>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://github.com/nixzhu/dev-blog/blob/master/2014-04-19-grand-central-dispatch-in-depth-part-1.md" target="_blank" rel="external">GCD 深入理解：第一部分</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;说明:&lt;/strong&gt;和上一篇GCD学习笔记一样,本篇文章主要内容还是来自于&lt;a href=&quot;https://github.com/nixzhu/dev-blog/blob/master/2014-04-19-grand-central-dispatch-
    
    </summary>
    
    
      <category term="iOS 技术 GCD" scheme="http://yoursite.com/tags/iOS-%E6%8A%80%E6%9C%AF-GCD/"/>
    
  </entry>
  
  <entry>
    <title>iOS知识专题之AR开发框架Vuforia学习笔记</title>
    <link href="http://yoursite.com/2018/03/16/iOS%E7%9F%A5%E8%AF%86%E4%B8%93%E9%A2%98%E4%B9%8BAR%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6Vuforia%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/03/16/iOS知识专题之AR开发框架Vuforia学习笔记/</id>
    <published>2018-03-16T04:23:59.000Z</published>
    <updated>2018-03-16T11:55:57.058Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://developer.vuforia.com" target="_blank" rel="external">Vuforia</a>是一个知名的AR开发框架，同时支持iOS和Android开发平台。</p>
<p>众所周知，苹果在iOS11推出了自己的AR开发框架ARKit，但是仍有较大的局限性，比如在硬件上只支持iPhone6s及以后的设备，包括iPhoneSE，主要是需要A9以上的芯片支持；而Android端目前还没有官方统一的AR支持框架。所以在需要进行移动端的AR开发时，Vuforia框架是一个不错的选择。</p>
<p>本文其实是自己研究Vuforia框架的学习笔记，仅供参考，如有错误请批评指正。</p>
<a id="more"></a>
<h2 id="几个比较重要的类"><a href="#几个比较重要的类" class="headerlink" title="几个比较重要的类"></a>几个比较重要的类</h2><p>Vuforia官方提供了三种类型的API:Unity,C++和Java。三种类型API的内容都是一一对应的，所以只需要选择适合自己的一种API进行学习使用即可。</p>
<h3 id="Vuforia-State"><a href="#Vuforia-State" class="headerlink" title="Vuforia::State"></a>Vuforia::State</h3><p>State中保存了当前AR环境中的摄像机帧和所有的trackables可跟踪对象。和Frame类似，State是个轻量级的对象，它的数据实际上保存在多个（其他类的）实例中。从State中查询的Trackables不能和从tracker中查询的Trackables指针比较，即使它们可能引用的是同一个对象。从state中查询的Trackables代表AR状态中临时的，不可变的view,因此不能修改。要想修改它们，必须从Tracker中查询它们。</p>
<p>在State中可能会包含有多个TrackableResult，因此可以从State中可以获取当前的某个TrackableResult对象。</p>
<h3 id="Vuforia-TrackableResult"><a href="#Vuforia-TrackableResult" class="headerlink" title="Vuforia::TrackableResult"></a>Vuforia::TrackableResult</h3><p>顾名思义，TrackableResult其实就是一个“跟踪的结果”，代表的是一个Trackable 在某一帧中的状态。</p>
<p>我们可以通过其实例方法获取到当前结果的各种参数，包括Pose(当前的姿势或位置矩阵)和Trackable （可跟踪的对象）。</p>
<h3 id="Vuforia-Trackable"><a href="#Vuforia-Trackable" class="headerlink" title="Vuforia::Trackable"></a>Vuforia::Trackable</h3><p>Trackable是所有可被跟踪对象的基类。子类主要包括，锚点类，可跟踪的设备，模型，以及单词word等。</p>
<p>使用它的实例方法我们可以获取到当前被跟踪对象的名称，类型，是否extended tracking可扩展跟踪等信息。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://developer.vuforia.com" target="_blank" rel="external">Vuforia官方网站</a></li>
<li><a href="https://library.vuforia.com/content/vuforia-library/en/reference/cpp/index.html" target="_blank" rel="external">Vuforia框架C++ API索引</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://developer.vuforia.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vuforia&lt;/a&gt;是一个知名的AR开发框架，同时支持iOS和Android开发平台。&lt;/p&gt;
&lt;p&gt;众所周知，苹果在iOS11推出了自己的AR开发框架ARKit，但是仍有较大的局限性，比如在硬件上只支持iPhone6s及以后的设备，包括iPhoneSE，主要是需要A9以上的芯片支持；而Android端目前还没有官方统一的AR支持框架。所以在需要进行移动端的AR开发时，Vuforia框架是一个不错的选择。&lt;/p&gt;
&lt;p&gt;本文其实是自己研究Vuforia框架的学习笔记，仅供参考，如有错误请批评指正。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vuforia AR" scheme="http://yoursite.com/tags/Vuforia-AR/"/>
    
  </entry>
  
  <entry>
    <title>iOS知识专题之GCD学习笔记一</title>
    <link href="http://yoursite.com/2018/03/12/iOS%E7%9F%A5%E8%AF%86%E4%B8%93%E9%A2%98%E4%B9%8BGCD%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>http://yoursite.com/2018/03/12/iOS知识专题之GCD学习笔记一/</id>
    <published>2018-03-12T01:20:08.000Z</published>
    <updated>2018-03-19T05:18:01.307Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>GCD是iOS和Mac OS X开发中处理并发的一个重要的底层技术，并且代码是开源的(<a href="https://opensource.apple.com/source/libdispatch/" target="_blank" rel="external">代码地址</a>)。它具有以下优点:</p>
<ul>
<li>GCD 能通过推迟昂贵计算任务并在后台运行它们来改善你的应用的响应性能;</li>
<li>GCD 提供一个易于使用的并发模型而不仅仅只是锁和线程，以帮助我们避开并发陷阱;</li>
<li>GCD 具有在常见模式（例如单例）上用更高性能的原语优化你的代码的潜在能力。</li>
</ul>
<p>GCD与线程和并发紧密相关，而相关的概念又比较多，容易混淆。本文是笔者学习GCD的笔记，只是为了便于加深记忆和以后查询，本文中的绝大部分内容都来自于<a href="https://github.com/nixzhu/dev-blog/blob/master/2014-04-19-grand-central-dispatch-in-depth-part-1.md" target="_blank" rel="external">这篇博客</a>,又加入了自己的一些总结，感谢大神的贡献。</p>
<a id="more"></a>
<h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><h4 id="Serial-vs-Concurrent-串行-vs-并发"><a href="#Serial-vs-Concurrent-串行-vs-并发" class="headerlink" title="Serial vs. Concurrent 串行 vs. 并发"></a>Serial vs. Concurrent 串行 vs. 并发</h4><p>这些术语描述当任务相对于其它任务被执行，任务串行执行就是每次只有一个任务被执行，任务并发执行就是在同一时间可以有多个任务被执行。</p>
<h4 id="Synchronous-vs-Asynchronous-同步-vs-异步"><a href="#Synchronous-vs-Asynchronous-同步-vs-异步" class="headerlink" title="Synchronous vs. Asynchronous 同步 vs. 异步"></a>Synchronous vs. Asynchronous 同步 vs. 异步</h4><p>在 GCD 中，这些术语描述当一个函数相对于另一个任务完成，此任务是该函数要求 GCD 执行的。</p>
<p>一个<em>同步</em>函数只在完成了它预定的任务后才返回;</p>
<p>一个<em>异步</em>函数，刚好相反，会立即返回，预定的任务会完成但不会等它完成。因此，一个异步函数不会阻塞当前线程去执行下一个函数。</p>
<h4 id="Critical-Section-临界区"><a href="#Critical-Section-临界区" class="headerlink" title="Critical Section 临界区"></a>Critical Section 临界区</h4><p>就是一段代码不能被并发执行，也就是，两个线程不能同时执行这段代码。这很常见，因为代码去操作一个共享资源，例如一个变量若能被并发进程访问，那么它很可能会变质（它的值不再可信）。</p>
<blockquote>
<p>临界区通俗的说，其实就是这个“区域”不能在不同线程同时去访问。</p>
</blockquote>
<h4 id="Race-Condition-竞态条件"><a href="#Race-Condition-竞态条件" class="headerlink" title="Race Condition 竞态条件"></a>Race Condition 竞态条件</h4><p>这种状况是指基于特定序列或时机的事件的软件系统以不受控制的方式运行的行为，例如程序的并发任务执行的确切顺序。竞态条件可导致无法预测的行为，而不能通过代码检查立即发现。</p>
<blockquote>
<p>在并发任务中，写在前面的任务并不一定先执行结束，如果想当然的认为先写的代码就会先结束，就可能会导致竞态条件。</p>
</blockquote>
<h4 id="Deadlock-死锁"><a href="#Deadlock-死锁" class="headerlink" title="Deadlock 死锁"></a>Deadlock 死锁</h4><p>两个（有时更多）东西——在大多数情况下，是线程——所谓的死锁是指它们都卡住了，并等待对方完成或执行其它操作。第一个不能完成是因为它在等待第二个的完成。但第二个也不能完成，因为它在等待第一个的完成。</p>
<blockquote>
<p>两个线程都卡住了,因为它们都在等待对方的完成。</p>
</blockquote>
<h4 id="Thread-Safe-线程安全"><a href="#Thread-Safe-线程安全" class="headerlink" title="Thread Safe 线程安全"></a>Thread Safe 线程安全</h4><p>线程安全的代码能在多线程或并发任务中被安全的调用，而不会导致任何问题（数据损坏，崩溃，等）。线程不安全的代码在某个时刻只能在一个上下文中运行。</p>
<p>一个线程安全代码的例子是 NSDictionary 。你可以在同一时间在多个线程中使用它而不会有问题。另一方面，NSMutableDictionary 就不是线程安全的，应该保证一次只能有一个线程访问它。</p>
<h4 id="Context-Switch-上下文切换"><a href="#Context-Switch-上下文切换" class="headerlink" title="Context Switch 上下文切换"></a>Context Switch 上下文切换</h4><p>一个上下文切换指当你在单个进程里切换执行不同的线程时存储与恢复执行状态的过程。这个过程在编写多任务应用时很普遍，但会带来一些额外的开销。</p>
<h4 id="Concurrency-vs-Parallelism-并发与并行"><a href="#Concurrency-vs-Parallelism-并发与并行" class="headerlink" title="Concurrency vs Parallelism 并发与并行"></a>Concurrency vs Parallelism 并发与并行</h4><p>我们知道,并发代码的不同部分可以“同步”执行(即可以同时的执行)。然而，该怎样发生或是否发生都取决于系统。多核设备通过并行来同时执行多个线程；然而，为了使单核设备也能实现这一点，它们必须先运行一个线程，执行一个上下文切换，然后运行另一个线程或进程。这通常发生地足够快以致给我们并发执行地错觉，如下图所示：</p>
<p><img src="http://osv8n47s0.bkt.clouddn.com/%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%B9%B6%E8%A1%8C.png" alt="并发与并行"></p>
<blockquote>
<p>上图中,上面的是真正的并行,而下面是并发,但是并未真正的并行，只是我们有一种“并行的错觉”。</p>
<p>虽然你可以编写代码在 GCD 下并发执行，但 GCD 会决定有多少并行的需求。并行<em>要求</em>并发，但并发并不能<em>保证</em>并行。</p>
</blockquote>
<p>更深入的观点是并发实际上是关于<em>构造</em>。当你在脑海中用 GCD 编写代码，你组织你的代码来暴露能同时运行的多个工作片段，以及不能同时运行的那些。</p>
<blockquote>
<p>通俗的可以理解为,并发是我们写的代码，让两个任务同时执行，而是否真的并行是由系统决定的。</p>
</blockquote>
<h4 id="Queues-队列"><a href="#Queues-队列" class="headerlink" title="Queues 队列"></a>Queues 队列</h4><p>GCD 提供有 dispatch queues 来处理代码块，这些队列管理你提供给 GCD 的任务并用 <code>FIFO (先进先出)</code>顺序执行这些任务。这就保证了第一个被添加到队列里的任务会是队列中第一个开始的任务，而第二个被添加的任务将第二个开始，如此直到队列的终点。</p>
<p>所有的调度队列（dispatch queues）自身都是线程安全的，你能从多个线程并行的访问它们。</p>
<p>当你了解了调度队列如何为你自己代码的不同部分提供线程安全后，GCD的优点就是显而易见的。关于这一点的关键是选择正确<strong>类型</strong>的调度队列和正确的<strong>调度函数</strong>来提交你的工作。</p>
<blockquote>
<p>调度队列主要是串行和并发,调度函数主要是同步和异步。选择合适的队列和合适的调度函数来实现自己特定的功能。</p>
</blockquote>
<h4 id="Serial-Queues-串行队列"><a href="#Serial-Queues-串行队列" class="headerlink" title="Serial Queues 串行队列"></a>Serial Queues 串行队列</h4><p>串行队列中的任务一次执行一个，每个任务只在前一个任务完成时才开始。而且，你不知道在一个 Block 结束和下一个开始之间的时间长度，如下图所示：</p>
<p><img src="http://osv8n47s0.bkt.clouddn.com/%E4%B8%B2%E8%A1%8C%E9%98%9F%E5%88%97.png" alt="串行队列"></p>
<p>这些任务的执行时机受到 GCD 的控制；唯一能确保的事情是 GCD 一次只执行一个任务，并且按照我们添加到队列的顺序来执行。</p>
<p>由于在串行队列中不会有两个任务并发运行，因此不会出现同时访问临界区的风险；相对于这些任务来说，这就从竞态条件下保护了临界区。所以如果访问临界区的唯一方式是通过提交到调度队列的任务，那么你就不需要担心临界区的安全问题了。</p>
<h4 id="Concurrent-Queues-并发队列"><a href="#Concurrent-Queues-并发队列" class="headerlink" title="Concurrent Queues 并发队列"></a>Concurrent Queues 并发队列</h4><p>在并发队列中的任务能得到的保证是它们会按照被添加的顺序开始执行，但这就是全部的保证了。任务可能以任意顺序完成，你不会知道何时开始运行下一个任务，或者任意时刻有多少 Block 在运行。再说一遍，这完全取决于 GCD 。</p>
<p>下图展示了一个示例任务执行计划，GCD 管理着四个并发任务：</p>
<p><img src="http://osv8n47s0.bkt.clouddn.com/%E5%B9%B6%E5%8F%91%E9%98%9F%E5%88%97.png" alt="并发队列"></p>
<p>注意 Block 1,2 和 3 都立马开始运行，一个接一个。在 Block 0 开始后，Block 1等待了好一会儿才开始。同样， Block 3 在 Block 2 之后才开始，但它先于 Block 2 完成。</p>
<p>何时开始一个 Block 完全取决于 GCD 。如果一个 Block 的执行时间与另一个重叠，也是由 GCD 来决定是否将其运行在另一个不同的核心上，如果那个核心可用，否则就用上下文切换的方式来执行不同的 Block 。</p>
<blockquote>
<p>再次强调:并发队列只能保证,任务按照被添加的顺序开始执行。即只有开始顺序是确定的。</p>
</blockquote>
<p>有趣的是， GCD 提供给你至少五个特定的队列，可根据队列类型选择使用。</p>
<h2 id="GCD队列类型——Queue-Types"><a href="#GCD队列类型——Queue-Types" class="headerlink" title="GCD队列类型——Queue Types"></a>GCD队列类型——Queue Types</h2><p>首先，系统提供给你一个叫做 <strong>主队列（main queue）</strong> 的特殊队列。和其它串行队列一样，这个队列中的任务一次只能执行一个。然而，它能保证所有的任务都在<strong>主线程</strong>执行，而主线程是唯一可用于更新 UI 的线程。这个队列就是用于发消息给 UIView 或发送通知的。</p>
<p>系统同时提供给你好几个<em>并发队列</em>。它们叫做 <strong>全局调度队列（Global Dispatch Queues）</strong>。目前的四个全局队列有着不同的<em>优先级</em>：background、low、default 以及 high。要知道，Apple 的 API 也会使用这些队列，所以你添加的任何任务都不会是这些队列中唯一的任务。</p>
<p>最后，<strong>你也可以创建自己的串行队列或并发队列</strong>。这就是说，至少有<em>五个</em>队列任你处置：主队列、四个全局调度队列，再加上任何你自己创建的队列。</p>
<p>GCD 的“艺术”归结为选择合适的队列来调度函数以提交你的工作。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://opensource.apple.com/source/libdispatch/" target="_blank" rel="external">GCD源码</a></li>
<li><a href="https://github.com/nixzhu/dev-blog/blob/master/2014-04-19-grand-central-dispatch-in-depth-part-1.md" target="_blank" rel="external">GCD 深入理解：第一部分</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;GCD是iOS和Mac OS X开发中处理并发的一个重要的底层技术，并且代码是开源的(&lt;a href=&quot;https://opensource.apple.com/source/libdispatch/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代码地址&lt;/a&gt;)。它具有以下优点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCD 能通过推迟昂贵计算任务并在后台运行它们来改善你的应用的响应性能;&lt;/li&gt;
&lt;li&gt;GCD 提供一个易于使用的并发模型而不仅仅只是锁和线程，以帮助我们避开并发陷阱;&lt;/li&gt;
&lt;li&gt;GCD 具有在常见模式（例如单例）上用更高性能的原语优化你的代码的潜在能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GCD与线程和并发紧密相关，而相关的概念又比较多，容易混淆。本文是笔者学习GCD的笔记，只是为了便于加深记忆和以后查询，本文中的绝大部分内容都来自于&lt;a href=&quot;https://github.com/nixzhu/dev-blog/blob/master/2014-04-19-grand-central-dispatch-in-depth-part-1.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇博客&lt;/a&gt;,又加入了自己的一些总结，感谢大神的贡献。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS 技术 GCD" scheme="http://yoursite.com/tags/iOS-%E6%8A%80%E6%9C%AF-GCD/"/>
    
  </entry>
  
  <entry>
    <title>iOS10推送和通知新特性总结</title>
    <link href="http://yoursite.com/2017/08/11/iOS10%E6%8E%A8%E9%80%81%E5%92%8C%E9%80%9A%E7%9F%A5%E6%96%B0%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/08/11/iOS10推送和通知新特性总结/</id>
    <published>2017-08-11T05:17:29.000Z</published>
    <updated>2017-08-11T05:32:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言:</strong>此文章是对iOS10推送和通知新特性的一些总结，主要内容是一些需要注意的经验或技巧，对通知中具体的API没有进行很详细的介绍，所以阅读此文章需要先对iOS10的推送有一个基础的了解。<br><a id="more"></a></p>
<p>可以参考本文的参考链接，是两位大神对iOS10通知和推送进行的更详细的说明。</p>
<h2 id="新framework"><a href="#新framework" class="headerlink" title="新framework"></a>新framework</h2><p>针对推送和通知,iOS10引入了两个新的framework:</p>
<ol>
<li><p>UserNotifications.framework：用来注册和处理本地和远程通知,当通知到达用户的设备上时，Apps和app extensions 可以使用这个framework去接收和潜在的修改本地通知或远程通知。</p>
</li>
<li><p>UserNotificationsUI.framework：用来定制本地或远程通知出现在用户设备上时的外观。可以通过使用这个framework去定义一个app extension去接受通知的数据，然后提供一个与数据符合的可视化外观。当然这个app extension也能响应和这个通知结合的定制的响应动作。</p>
</li>
</ol>
<h2 id="新特性："><a href="#新特性：" class="headerlink" title="新特性："></a>新特性：</h2><ol>
<li><p>总体来说增加的新的实用的功能包括：撤回单条通知、更新已展示通知、中途修改通知内容、在通知中显示多媒体资源、自定义UI等。</p>
</li>
<li><p>iOS10以后，APNs可根据推送消息的唯一标示符查询某条消息是否被用户阅读，可更新某一推送消息，而不用发重读的多条消息。</p>
</li>
</ol>
<h2 id="推送字段说明："><a href="#推送字段说明：" class="headerlink" title="推送字段说明："></a>推送字段说明：</h2><ol>
<li>mutable-content:在推送中增加这个字段，决定了我们可以在service notification扩展中修改通知内容，也可以在content notification扩展中自定义通知界面。如果没有这个字段,我们新增的通知扩展不会生效。</li>
<li>category:是和后台商量好的一个值,不同的category可以显示不同的action,也就是通知下面的按钮或者输入框,可以扩展一些操作而不必进入程序。</li>
<li>apps-collapse-id:作为唯一标示，可以用来更新推送。</li>
<li>content-available:这个是在iOS7时引入的一个字段，如果开启了Background mode下的remote notification,并且推送的字段中包含此字段，只要用户不强制关掉App,App无论是在后台还是在前台，都可以回调下面的方法。<pre><code>- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(nonnull void (^)(UIBackgroundFetchResult))completionHandler</code></pre>

</li>
</ol>
<h2 id="经验技巧（tips）"><a href="#经验技巧（tips）" class="headerlink" title="经验技巧（tips）"></a>经验技巧（tips）</h2><ol>
<li>调用方法<pre><code>[[UIApplication sharedApplication] registerForRemoteNotifications];</code></pre>会触发调用下面两个方法之一<pre><code>- (void)application:(UIApplication <em>)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData </em>)deviceToken</code></pre><br><pre><code>- (void)application:(UIApplication <em>)application didFailToRegisterForRemoteNotificationsWithError:(NSError </em>)error</code></pre><br>也就是说，在真机环境下，哪怕用户还没有允许通知，或者设置了禁用推送，手机都是可以通过回调获取到deviceToken的。</li>
<li>iOS10中申请通知权限的代码如下:<pre><code>
UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];
     center.delegate = self;
     //        [center setNotificationCategories:nil];
     [center getNotificationSettingsWithCompletionHandler:^(UNNotificationSettings * _Nonnull settings) {
         if (settings.authorizationStatus == UNAuthorizationStatusNotDetermined) {
             [center requestAuthorizationWithOptions:(UNAuthorizationOptionBadge | UNAuthorizationOptionSound | UNAuthorizationOptionAlert) completionHandler:^(BOOL granted, NSError * _Nullable error) {
                 if (granted && !error) {
                     NSLog(@"允许通知");
                 } else {
                     NSLog(@"拒绝通知");
                 }
             }];
         }
     }];
     //在用户允许通知之后，在真机中会再次回调获取到deviceToken的代理方法。
     </code></pre></li>
<li><p>iOS10之前，在（1）应用程序在前台时；（2）应用程序在后台，然后点击了推送进入应用程序时，两种情况下会回调方法<br><pre><code>- (void)application:(UIApplication <em>)application didReceiveRemoteNotification:(NSDictionary </em>)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult result))completionHandler{<br> //下面简称“方法1”<br>}<br></code></pre><br>如果开启了后台推送模式,还会在第三种情况下（3）应用程序在后台时，调用此方法。</p>
<p> 从iOS10开始,新增了两个通知中心的代理方法来处理通知<br> <pre><code>- (void)userNotificationCenter:(UNUserNotificationCenter <em>)center willPresentNotification:(UNNotification </em>)notification withCompletionHandler:(void (^)(UNNotificationPresentationOptions options))completionHandler {<br> //下面简称“方法2”<br> //此方法只有应用程序在前台时才会调用,通知展示之前调用<br> NSLog(@”应用程序在前台,即将展示推送”);<br> completionHandler(UNNotificationPresentationOptionBadge | UNNotificationPresentationOptionSound | UNNotificationPresentationOptionAlert);<br>}<br></code></pre><br><pre><code>- (void)userNotificationCenter:(UNUserNotificationCenter <em>)center didReceiveNotificationResponse:(UNNotificationResponse </em>)response withCompletionHandler:(void(^)())completionHandler {<br> //下面简称“方法3”<br> //用户对通知进行响应之后调用,各种响应都会调用此方法，可以根据参数response来判断用户的响应方式,是点击了通知，点击了按钮还是输入了内容等<br> NSLog(@”用户响应”);<br> completionHandler();<br>}<br></code></pre><br>如果实现了上述两个新增方法，当推送到达之后，调用的方法情况会发生变化，如下：</p>
<ul>
<li>应用程序在前台，会首先调用“方法1”,然后再调用方法2；</li>
<li>应用程序在后台，只调用“方法1”；</li>
<li>应用程序在后台，点击某一条推送，调用“方法3”；</li>
<li>应用程序在前台，点击某一条推送，调用“方法3”。</li>
</ul>
</li>
<li>使用了iOS10的新增方法之后，要想在推送到达之前或者应用程序在后台时执行一段代码，比如修改推送内容再提示用户，需要在项目中使用应用程序扩展Notification Service Extension来实现。</li>
<li>如果在项目中使用了应用程序扩展Notification Service Extension，在调试的过程中，如果想要打断点调试扩展的代码，需要在Xcode中运行扩展，然后再选择项目，才可以。（后面要说的另外一个扩展Notification Content Extension也是一样的道理）</li>
<li>iOS10的通知新特性可以让通知中包含附件,比如音频、图像或视频等内容,并且可以将其内容显示出来。使用本地通知时,可以在通知创建时,将附件加入即可。对于远程通知，则必须实现使用UNNotificationServiceExtension类通知服务扩展。</li>
<li>如果在项目中使用了应用程序扩展Notification Content Extension,如果想要看到效果，必须在扩展的info.plist文件中设置NSExtension-&gt;NSExtensionAttributes-&gt;UNNotificationExtensionCategory字段的内容，可以是字符串或者字符串数组，字符串代表的是categoryIdentifier，必须和通知内容中的categoryIdentifier保持一致才会有效果。</li>
<li>如果使用本地推送，触发器为位置信息时，一般使用CLRegion的子类CLCircularRegion类来定义位置信息。</li>
<li>附件类UNNotificationAttachment定义的options属性中的UNNotificationAttachmentOptionsThumbnailClippingRectKey,代表的是缩略图显示的图片范围。（这个键所对应的值是包含一个归一化的CGRect - 也就是说，一个单元的矩形，其值是在以1.0〜 0.0 ，表示要显示的原始图像的所述部分的字典。例如，原点为（0.25 ， 0.25）和大小为（0.5 ，0.5 ）定义了剪辑矩形，只显示图像的中心部分。使用CGRectCreateDictionaryRepresentation函数来创建字典的矩形。）</li>
<li>附件的路径并不一定需要时https的，只要打开Allow Arbitrary Loads后就可以使用http。</li>
<li><p>假如前面在Service Extension下载好了图片或者是视频，在自定义UI部分想要获取，就可以通过UNNotificationAttachment * attachment = notification.request.content.attachments.firstObject;查找附件来获取数据。但是必须注意，形成附件后，文件的实际存储被移到了pushStore的一个系统级别的缓存文件夹，此时需要调用NSURL在iOS8开始提供的两个方法来获取权限，提取数据。</p>
<blockquote>
<p><code>startAccessingSecurityScopedResource</code><br><code>stopAccessingSecurityScopedResource</code></p>
</blockquote>
</li>
</ol>
<pre><code>[attachment.URL startAccessingSecurityScopedResource];
        NSData * data = [NSData dataWithContentsOfFile:attachment.URL.path];
        [attachment.URL stopAccessingSecurityScopedResource];
        self.imageView.image = [UIImage imageWithData:data];
</code></pre>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="http://www.jianshu.com/p/9c9035212af0" target="_blank" rel="external">iOS10里的通知与推送</a></li>
<li><a href="http://www.jianshu.com/p/f5337e8f336d" target="_blank" rel="external">iOS10推送必看系列文章,总共四篇</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言:&lt;/strong&gt;此文章是对iOS10推送和通知新特性的一些总结，主要内容是一些需要注意的经验或技巧，对通知中具体的API没有进行很详细的介绍，所以阅读此文章需要先对iOS10的推送有一个基础的了解。&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS,推送,通知" scheme="http://yoursite.com/tags/iOS-%E6%8E%A8%E9%80%81-%E9%80%9A%E7%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>iOS中制作Framework静态库</title>
    <link href="http://yoursite.com/2017/08/07/iOS%E4%B8%AD%E5%88%B6%E4%BD%9CFramework%E9%9D%99%E6%80%81%E5%BA%93/"/>
    <id>http://yoursite.com/2017/08/07/iOS中制作Framework静态库/</id>
    <published>2017-08-07T10:47:18.000Z</published>
    <updated>2017-11-20T09:19:22.365Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>iOS开发中我们经常需要用到各种库，比如开源库AFNetworking,静态库BaiduMapAPI_Base.framework（百度地图SDK）,还有系统动态库UIKit.framework等等，今天我们来学习一下相关知识并自己制作一个framework静态库。<br><a id="more"></a></p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="库"><a href="#库" class="headerlink" title="库"></a>库</h3><p>什么是库？</p>
<p>库是程序代码的集合，是共享程序代码的一种方式。<br>根据源代码的公开情况，库可以分为开源库和闭源库两种类型。</p>
<p>开源库：公开源代码，能看到具体实现，比如 SDWebImage 、 AFNetworking。</p>
<p>闭源库：不公开源代码，是经过编译后的二进制文件，看不到具体实现，主要分为静态库和动态库。</p>
<h3 id="静态库和动态库"><a href="#静态库和动态库" class="headerlink" title="静态库和动态库"></a>静态库和动态库</h3><p>1、静态库和静态库的存在形式</p>
<p>静态库：.a和.framework</p>
<p>动态库：.dylib(现在为.tbd)和.framework</p>
<p>2、静态库和动态库使用时的区别</p>
<p>静态库：链接时，静态库会被完整地复制到可执行文件中， 被多次使用就有多份冗余拷贝；</p>
<p>动态库：链接时不复制，程序运行时由系统动态加载到内存，供程序调用，系统只加载一次，多个程序共用，节省内存。</p>
<p><img src="http://osv8n47s0.bkt.clouddn.com/blog/1424051789719516.png" alt="静态库使用"><br><img src="http://osv8n47s0.bkt.clouddn.com/blog/1424051789127826.png" alt="动态库使用"></p>
<p>3、.a与.framework的区别</p>
<p>.a是纯二进制文件，.a文件不能单独使用，至少要有.h文件配合；</p>
<p>.framework除了二进制文件外，还包含一些资源文件（头文件，plist等），由于自身包含了头文件，所以.framework可以单独使用。</p>
<h2 id="制作framework静态库"><a href="#制作framework静态库" class="headerlink" title="制作framework静态库"></a>制作framework静态库</h2><h3 id="创建静态库工程"><a href="#创建静态库工程" class="headerlink" title="创建静态库工程"></a>创建静态库工程</h3><p>新建一个项目，选择Cocoa Touch Framework<br><img src="http://osv8n47s0.bkt.clouddn.com/select_template.png" alt="选择工程模板"><br>将静态库命名为SONGTestLib（名字随便起），并填写其他必要信息<br><img src="http://osv8n47s0.bkt.clouddn.com/Snip20170803_1.png" alt=""><br>新建完成之后，在PROJECT&gt;Info&gt;Deployment Target&gt;iOS Deployment Target选择你需要支持的最低系统版本，同样的操作在TARGETS中，General&gt;Deployment Info&gt;Deployment Target，选择需要支持的最低系统版本。<br><img src="http://osv8n47s0.bkt.clouddn.com/Snip20170912_2.png" alt=""><br><img src="http://osv8n47s0.bkt.clouddn.com/Snip20170912_1.png" alt=""></p>
<p>项目初始生成时会自动生成一个头文件SONGTestLib.h(工程名.h),创建其他相关代码文件并编写代码<br><img src="http://osv8n47s0.bkt.clouddn.com/add_code.png" alt=""><br>选择工程文件&gt;target&gt;Build Settings&gt;Linking&gt;Mach-O Type，设置为Static Library，因为系统默认创建的是动态库，需要设置此项才能生成静态库。<br><img src="http://osv8n47s0.bkt.clouddn.com/select_type.png" alt="选择库类型"><br>选择工程文件&gt;target&gt;Build Phases&gt;Headers,将需要公开的头文件从Project中拖入Public。<br><img src="http://osv8n47s0.bkt.clouddn.com/select_headers.png" alt="公开头文件"><br>将需要公开的.h文件都用<code>#import&lt;SONGTestLib/PublicHeader.h&gt;</code>形式引入,记住一定要将所有的需要公开的.h文件都写在给定的.h文件中,不然编译后生成的.framework在引用的时候会有警告。<br><img src="http://osv8n47s0.bkt.clouddn.com/Snip20170803_3.png" alt="引入公开的头文件"></p>
<h3 id="添加资源文件（可选）"><a href="#添加资源文件（可选）" class="headerlink" title="添加资源文件（可选）"></a>添加资源文件（可选）</h3><p>有时候我们的静态库中也需要图片素材、媒体文件、xib、storyboard等外部资源，此时我们可以通过bundle将这些资源文件一起打包到framework中。</p>
<blockquote>
<p><strong>外部资源不能直接打包到framework静态库中，必须将资源放到.bundle中。</strong></p>
<p>bundle是静态的，也就是说，我们包含到包中的资源文件作为一个资源包是不参加项目编译的。也就意味着，bundle包中不能包含可执行的文件。它仅仅是作为资源，被解析成为特定的2进制数据。</p>
</blockquote>
<h5 id="创建-bundle"><a href="#创建-bundle" class="headerlink" title="创建.bundle"></a>创建.bundle</h5><p><strong>方法一:</strong>第一种创建.bundle的方法很简单，直接新建一个文件夹，将文件夹添加后缀.bundle即可。</p>
<blockquote>
<p>如果需要的外部资源中只包含图片素材或媒体文件,可以优先选择这种方式,当然也可以选择下面的方法二。</p>
</blockquote>
<p><strong>方法二:</strong>通过创建工程的方式创建.bundle。</p>
<ol>
<li>新建一个项目,选择macOS&gt;Framework &amp; Library&gt;Bundle</li>
<li>给项目命名,并填写其他必要信息</li>
<li>在TARGETS&gt;Build Settings&gt;Deployment&gt;iOS Deployment Target&gt;选择自己需要支持的最低系统版本</li>
<li>Build后会生成一个bundle包，但在包中的图片由以前的png格式全部变成tiff格式。为了防止这种格式转变,需要在Build Settings&gt;Architectures&gt;Base SDK&gt;选择iOS的SDK要支持的版本。这时TARGETS中Build Settings&gt;User-Defined中会出现一个新的Key：<code>COMBINE_HIDPI_IMAGES</code>,把它设置为NO。</li>
<li>将需要的资源,如图片、storyboard、xib等文件添加到工程中。storyboard和xib文件可以直接从其他项目中拖过来，也可以在当前Bundle工程中创建;至于连线,不必拘泥于必须在同一个工程中的文件,即一个工程中的xib可以与另一个工程中的文件连线,只要类名相同即可。</li>
<li>上面所有的步骤完成之后,command+B编译项目,即可在Products中找到生成的bundle。<br><img src="http://osv8n47s0.bkt.clouddn.com/Snip20170913_1.png" alt="Show in Finder"></li>
</ol>
<h5 id="使用-bundle"><a href="#使用-bundle" class="headerlink" title="使用.bundle"></a>使用.bundle</h5><p>将.bundle添加到静态库工程中：直接将.bundle拖入到工程中即可。</p>
<blockquote>
<p>注:如果.bundle中包含编译之后的xib、storyboard等文件,在framework中包含xib对应的类,在使用时可能会遇到类似<code>Unknown class NewCell in Interface Builder file.</code>或者<pre><code>[<uitableviewcell 0x7fd23c03b600=""> setValue:forUndefinedKey:]: this class is not key value coding-compliant for the key myImageView.</uitableviewcell></code></pre>的报错,这是因为xib等文件中的使用的类名没有被链接到项目中。这里列举两种解决方法:</p>
<ol>
<li>在任意一个代码文件中调用一下报错的类,例如[MyClass class];即可。</li>
<li>选择工程文件&gt;target&gt;Build Settings&gt;Linking&gt;Other Linker Flags，设置为-ObjC。</li>
</ol>
</blockquote>
<p><strong>获取bundle中的资源</strong></p>
<ol>
<li>获取bundle路径<pre><code>NSString *bundlePath = [NSBundle mainBundle] pathForResource:@"NibBundle" ofType:@"bundle"]</code></pre></li>
<li>获取bundle<pre><code>NSBundle *myBundle = [NSBundle bundleWithPath:bundlePath]</code></pre></li>
<li>加载bundle中的某个nib<pre><code>[UINib nibWithNibName:@"NibCell" bundle:myBundle]</code></pre>
或者
<pre><code>[[myBundle loadNibNamed:@"NibCell" owner:self options:nil] lastObject];</code></pre></li>
<li>获取bundle中的图片<pre><code>UIImage *image = [UIImage imageNamed:[@"YourBundleName.bundle" stringByAppendingPathComponent:@"yourImageName.png"]];</code></pre>
或者
<pre><code>UIImage *image = [UIImage imageWithContentsOfFile:[bundlePath stringByAppendingPathComponent:@"yourImageName.png"]];</code></pre>

</li>
</ol>
<h3 id="生成通用的静态库"><a href="#生成通用的静态库" class="headerlink" title="生成通用的静态库"></a>生成通用的静态库</h3><p>此时对工程进行编译已经可以生成静态库，但按照工程默认的设置，静态库并不是支持所有的架构。因为我们的静态库是给别人用的，所以一般会支持所有的架构，模拟器和真机的各种机型都要支持，所以还需要一定的工作来生成通用的静态库。</p>
<h5 id="Debug和Release版本"><a href="#Debug和Release版本" class="headerlink" title="Debug和Release版本"></a>Debug和Release版本</h5><ul>
<li>一般来说, 我们应该发布的是release版本。</li>
<li>debug:调试版本, 系统本身也会有一些调试代码. 此版本体积会稍大, 运行会稍慢。</li>
<li>release: 发布版本, 系统会去除调试代码, 体积变小, 运行速度变快. 对用户来说没有明显的感觉。</li>
</ul>
<h5 id="导出Products静态库的配置"><a href="#导出Products静态库的配置" class="headerlink" title="导出Products静态库的配置"></a>导出Products静态库的配置</h5><p>在静态库工程中，如果配置中的Build Active Architecture Only设置为YES的话，导出的静态库只包含当前的架构。在默认配置中Targets&gt;Build Settings&gt;Build Active Architecture Only,Debug为YES,release为NO，我们要发布的也是release版本，所以要确保这一步没有修改。</p>
<p>修改Scheme:<br><img src="http://osv8n47s0.bkt.clouddn.com/edit_scheme.png" alt="编辑Scheme"><br>将Build Configuration为Release<br><img src="http://osv8n47s0.bkt.clouddn.com/select_release.png" alt="修改为release"></p>
<h4 id="分别导出模拟器和真机版本的静态库"><a href="#分别导出模拟器和真机版本的静态库" class="headerlink" title="分别导出模拟器和真机版本的静态库"></a>分别导出模拟器和真机版本的静态库</h4><p>先选择Generic iOS Device，按下Command+B：Build一下</p>
<p>然后随意选择一个模拟器再次Build一下</p>
<p>找到Build后的framework<br><img src="http://osv8n47s0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-08-03%20%E4%B8%8B%E5%8D%882.44.56.png" alt="找到静态库"><br>我们看到总共有两个文件夹，Release-iphoneos文件夹中是真机编译生成的文件，Release-iphonesimulator文件夹中是模拟器编译生成的文件。<br><img src="http://osv8n47s0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-08-03%20%E4%B8%8B%E5%8D%882.46.16.png" alt="两种静态库"></p>
<h4 id="合并静态库的模拟器与真机架构"><a href="#合并静态库的模拟器与真机架构" class="headerlink" title="合并静态库的模拟器与真机架构"></a>合并静态库的模拟器与真机架构</h4><blockquote>
<p>合并之后的动态/静态库要与原来的名称一致，不然用的时候编译会报错</p>
<p>合并的主要是是framework下的同名文件</p>
</blockquote>
<p>我们将合并后的文件放到Products文件夹下,命令行为<pre><code>lipo -create /Users/songbo/Library/Developer/Xcode/DerivedData/SONGTestLib-dalamcasyjusbjcoiswoasefbbuq/Build/Products/Release-iphonesimulator/SONGTestLib.framework/SONGTestLib /Users/songbo/Library/Developer/Xcode/DerivedData/SONGTestLib-dalamcasyjusbjcoiswoasefbbuq/Build/Products/Release-iphoneos/SONGTestLib.framework/SONGTestLib -output /Users/songbo/Library/Developer/Xcode/DerivedData/SONGTestLib-dalamcasyjusbjcoiswoasefbbuq/Build/Products/SONGTestLib</code></pre></p>
<p><img src="http://osv8n47s0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-08-03%20%E4%B8%8B%E5%8D%882.50.48.png" alt="合并架构的命令截图"><br>这里解释一下这看似很复杂的命令：lipo -create +被合成的两个原来文件的路径 + -output + 合成后文件的输出路径 ，所以上面命令执行之后会在Products文件夹下生成合成之后的文件<br><img src="http://osv8n47s0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-08-03%20%E4%B8%8B%E5%8D%882.50.17.png" alt="合成后的文件"><br>将合成之后的文件SONGTestLib替换掉之前Release-iphoneos中framework中的SONGTestLib,此时Release-iphoneos中framework即是我们合成之后可以使用的framework。</p>
<h4 id="验证合并后的静态库架构"><a href="#验证合并后的静态库架构" class="headerlink" title="验证合并后的静态库架构"></a>验证合并后的静态库架构</h4><p>验证静态库架构的代码为lipo -info + 静态库文件路径</p>
<p>例如验证我们上面制作的静态库架构</p>
<p><pre><code>lipo -info /Users/songbo/Library/Developer/Xcode/DerivedData/SONGTestLib-dalamcasyjusbjcoiswoasefbbuq/Build/Products/Release-iphoneos/SONGTestLib.framework/SONGTestLib</code></pre><br><img src="http://osv8n47s0.bkt.clouddn.com/Snip20170807_1.png" alt="验证静态库架构"><br>验证显示我们制作的静态库架构包括i386 armv7 x86_64 arm64，符合我们的要求。</p>
<p>至此，静态库制作完成。</p>
<h2 id="使用静态库"><a href="#使用静态库" class="headerlink" title="使用静态库"></a>使用静态库</h2><h3 id="添加静态库"><a href="#添加静态库" class="headerlink" title="添加静态库"></a>添加静态库</h3><p>将上文制作好的静态库直接拖入到需要使用静态库的项目中，注意将Copy items if needed打勾，<br><img src="http://osv8n47s0.bkt.clouddn.com/Snip20170807_2.png" alt="勾选Copy items if needed"></p>
<h3 id="使用资源文件-可选-与制作静态库时对应"><a href="#使用资源文件-可选-与制作静态库时对应" class="headerlink" title="使用资源文件(可选,与制作静态库时对应)"></a>使用资源文件(可选,与制作静态库时对应)</h3><p>如果制作静态库时，在静态库中添加了.bundle形式的资源文件，此时如果资源文件是必须用的，还必须要将资源文件添加到当前的工程项目中：</p>
<p>方法：选中工程名，在右键菜单中选择Add Files to “工程名”…，从SONGTestLib.framework中选择SONGImages.bundle文件，并勾选“Copy items if needed”复选框，单击“Add”按钮，将资源文件添加到工程中。<br><img src="http://osv8n47s0.bkt.clouddn.com/Snip20170807_3.png" alt="添加资源文件"></p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>如果静态库内有 category 分类，那么需要在添加 -ObjC 编译标识，否则可能会报：unrecognized selector sent to instance。</p>
<p>方法：选择工程文件&gt;target&gt;Build Settings&gt;Linking&gt;Other Linker Flags，设置为-ObjC<br><img src="http://osv8n47s0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-08-03%20%E4%B8%8B%E5%8D%883.00.33.png" alt="设置-ObjC"></p>
<blockquote>
<p>其他编译参数说明</p>
<p>1、<code>－ObjC</code>：加了这个参数后，链接器就会把静态库中所有的Objective-C类和分类都加载到最后的可执行文件中。</p>
<p>2、<code>－all_load</code>：会让链接器把所有找到的目标文件都加载到可执行文件中，但是千万不要随便使用这个参数！假如你使用了不止一个静态库文件，然后又使用了这个参数，那么你很有可能会遇到ld: duplicate symbol错误，因为不同的库文件里面可能会有相同的目标文件，所以建议在遇到<code>-ObjC</code>失效的情况下使用<code>-force_load</code>参数。</p>
<p>3、<code>-force_load</code>：所做的事情跟<code>-all_load</code>其实是一样的，但是<code>-force_load</code>需要指定要进行全部加载的库文件的路径，这样的话，你就只是完全加载了一个库文件，不影响其余库文件的按需加载。</p>
</blockquote>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="http://www.infocool.net/kb/IOS/201610/196771.html" target="_blank" rel="external">ios开发：Xcode8制作framework及使用</a></li>
<li><a href="http://billchan.me/2016/07/31/how-to-use-static-library-in-ios/" target="_blank" rel="external">iOS 中静态链接库的使用</a></li>
<li><a href="http://blog.csdn.net/tianshats/article/details/52045974" target="_blank" rel="external">IOS开发中制作属于自己的静态库.a、资源库.bundle、.framework</a></li>
<li><a href="http://www.jianshu.com/p/f9befc134dbc" target="_blank" rel="external">iOS中的静态库 .a 和 .framework &amp;&amp; 资源库.bundle</a></li>
<li><a href="https://my.oschina.net/kaqijiang/blog/649632" target="_blank" rel="external">iOS静态库 【.a 和framework】</a></li>
<li><a href="http://www.jianshu.com/p/038dab7accbc" target="_blank" rel="external">xcode7制作framework,结合xib,storyboard,资源文件等</a></li>
<li><a href="https://stackoverflow.com/questions/1725881/unknown-class-myclass-in-interface-builder-file-error-at-runtime" target="_blank" rel="external">“Unknown class <myclass> in Interface Builder file” error at runtime</myclass></a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;iOS开发中我们经常需要用到各种库，比如开源库AFNetworking,静态库BaiduMapAPI_Base.framework（百度地图SDK）,还有系统动态库UIKit.framework等等，今天我们来学习一下相关知识并自己制作一个framework静态库。&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS,技术" scheme="http://yoursite.com/tags/iOS-%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>未来已来 - 打开新世界</title>
    <link href="http://yoursite.com/2017/07/11/%E6%9C%AA%E6%9D%A5%E5%B7%B2%E6%9D%A5-%E6%89%93%E5%BC%80%E6%96%B0%E4%B8%96%E7%95%8C/"/>
    <id>http://yoursite.com/2017/07/11/未来已来-打开新世界/</id>
    <published>2017-07-11T02:18:47.000Z</published>
    <updated>2017-07-11T02:28:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hi,大家好，我是此刻柳暗花明，本名宋波，目前在做iOS开发。我希望自己会是一个实干家，因为我有很多梦想，我想看到它们开花结果。欢迎来到我的地盘，嘿嘿！😜<br><a id="more"></a></p>
<blockquote>
<p>赠人玫瑰，手有余香。</p>
</blockquote>
<p>最近抽时间搭建了真正属于自己的博客，今后我会在此分享学习心得，记录生活感受。如果能够在写作过程中帮助到一些人，或者为他们带去一些启发，我一定会非常开心。</p>
<p>每个人都会憧憬更加美好的未来，而未来从哪里来？从此刻来。好好的把握现在，认真的活在当下，一切希望都会水到渠成，我们都会此刻柳暗花明。</p>
<p>未来已来——未来由此刻创造，未来诞生于此刻。新世界已打开，我是此刻柳暗花明，祝你好运！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hi,大家好，我是此刻柳暗花明，本名宋波，目前在做iOS开发。我希望自己会是一个实干家，因为我有很多梦想，我想看到它们开花结果。欢迎来到我的地盘，嘿嘿！😜&lt;br&gt;
    
    </summary>
    
    
      <category term="感悟" scheme="http://yoursite.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
</feed>
